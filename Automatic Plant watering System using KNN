{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2899154,"sourceType":"datasetVersion","datasetId":1776583}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/klewikkanel/automatic-plant-watering-system-using-knn?scriptVersionId=174752045\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np \nimport pandas as pd \nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.experimental import enable_iterative_imputer \nfrom sklearn.impute import IterativeImputer\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.experimental import enable_halving_search_cv\nfrom sklearn.model_selection import HalvingGridSearchCV, KFold, cross_val_predict\nfrom sklearn.metrics import roc_curve, roc_auc_score, classification_report, confusion_matrix, accuracy_score","metadata":{"execution":{"iopub.status.busy":"2024-04-29T19:08:07.618162Z","iopub.execute_input":"2024-04-29T19:08:07.618719Z","iopub.status.idle":"2024-04-29T19:08:07.632632Z","shell.execute_reply.started":"2024-04-29T19:08:07.618676Z","shell.execute_reply":"2024-04-29T19:08:07.631197Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/dataset-for-predicting-watering-the-plants/TARP.csv')\ndf.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"encoder = LabelBinarizer()\ndf['Status'] = encoder.fit_transform(df['Status'])\ndf.info()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe().T","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"imputer = IterativeImputer(random_state=46, verbose=True)\ndata = imputer.fit_transform(df)\ndata = pd.DataFrame(data, columns = df.columns)\ndata.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nplt.figure(figsize=(20,20))\ncorr = df.corr()\nsns.heatmap(corr,annot=True)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#scaling the data\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler((-1,1))\nsdf = scaler.fit_transform(data.iloc[:,:-1], data.iloc[:,-1])\nscaled_df = pd.DataFrame(sdf, columns = data.iloc[:,:-1].columns)\nscaled_df['Status'] = data['Status']\nscaled_df.head()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def distplots(col):\n  sns.distplot(df[col])\n  plt.show()\n\nfor i in list(df.columns)[:-1]:\n  distplots(i)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"g = sns.clustermap(scaled_df.corr(), \n                   method = 'complete', \n                   cmap   = 'RdBu', \n                   annot  = True, \n                   annot_kws = {'size': 8})\nplt.setp(g.ax_heatmap.get_xticklabels(), rotation=60);","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.hist(scaled_df['Status'])\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*SVM*","metadata":{}},{"cell_type":"code","source":"x = scaled_df.iloc[:,:-1]\ny = scaled_df.iloc[:,-1]","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#scaling the data\nscaler = MinMaxScaler((-1,1))\n#scaler = StandardScaler()\nx=scaler.fit_transform(x)\ny = y","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.3, random_state=7)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel_knn3 = KNeighborsClassifier(n_neighbors=3)\nknn = model_knn3.fit(x_train, y_train)\n# Predicting Test Set N=3\ny_pred = model_knn3.predict(x_test)\n#Accuracy\naccuracy_KNN = accuracy_score (y_test, y_pred)\nprint(f'Accuracy: {accuracy_KNN * 100:.2f}%')","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, y_pred))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred)\n\n# Display the confusion matrix using seaborn\nsns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"input_data = (5,23,27,4,21.44,5.8,28.38,22.67,101.46,7.375482851,224.0581164,98,47,37)\n\ninput_data_as_array = np.asarray(input_data)\ninput_data_reshaped = input_data_as_array.reshape(1,-1)\nstd_data = scaler.transform(input_data_reshaped)\n\nprediction = model_knn3.predict(std_data)\nprint(prediction)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}